::: {.callout-note collapse="true"}
## Neighbors
```{=html}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/7.8.5/d3.min.js"></script>
    <style>
        .mini-graph {
            width: 100%;
            height: 200px;
            border: 1px solid #ddd;
        }
        .mini-graph .node circle {
            fill: #4285F4;
            cursor: pointer;
        }
        .mini-graph .node text {
            font-size: 8px;
            fill: #333;
        }
        .mini-graph .link {
            stroke: #999;
            stroke-opacity: 0.6;
        }
        .mini-graph .link.incoming {
            stroke: #28a745;
        }
        .mini-graph .link.outgoing {
            stroke: #dc3545;
        }
    </style>
</head>
<body>
    <div id="mini-graph" class="mini-graph"></div>

    <script>
    (function() {
        const currentFile = "{{< filename >}}"; // Replace this with the current file name
        
        d3.json('backlinks.json').then(data => {
            const svg = d3.select("#mini-graph")
                .append("svg")
                .attr("width", "100%")
                .attr("height", "100%")
                .attr("viewBox", [0, 0, 300, 200]);

            // Find both incoming and outgoing neighbors
            const neighbors = new Set([currentFile]);
            const links = [];

            // Outgoing links
            (data[currentFile] || []).forEach(target => {
                neighbors.add(target);
                links.push({ source: currentFile, target, type: 'outgoing' });
            });

            // Incoming links
            Object.entries(data).forEach(([source, targets]) => {
                if (targets.includes(currentFile) && source !== currentFile) {
                    neighbors.add(source);
                    links.push({ source, target: currentFile, type: 'incoming' });
                }
            });

            const nodes = Array.from(neighbors).map(id => ({ id }));

            const simulation = d3.forceSimulation(nodes)
                .force("link", d3.forceLink(links).id(d => d.id).distance(50))
                .force("charge", d3.forceManyBody().strength(-100))
                .force("center", d3.forceCenter(150, 100))
                .force("collision", d3.forceCollide().radius(20));

            const link = svg.append("g")
                .selectAll("line")
                .data(links)
                .join("line")
                .attr("class", d => `link ${d.type}`);

            const node = svg.append("g")
                .selectAll(".node")
                .data(nodes)
                .join("g")
                .attr("class", "node")
                .call(d3.drag()
                    .on("start", dragstarted)
                    .on("drag", dragged)
                    .on("end", dragended));

            node.append("circle")
                .attr("r", d => d.id === currentFile ? 8 : 5);

            node.append("text")
                .attr("dx", 8)
                .attr("dy", ".35em")
                .text(d => d.id.replace('.qmd', ''));

            node.on('click', (event, d) => {
                const url = d.id.replace('.qmd', '.html');
                window.open(url, '_blank');
            });

            simulation.on("tick", () => {
                link
                    .attr("x1", d => d.source.x)
                    .attr("y1", d => d.source.y)
                    .attr("x2", d => d.target.x)
                    .attr("y2", d => d.target.y);

                node.attr("transform", d => `translate(${d.x},${d.y})`);
            });

            function dragstarted(event) {
                if (!event.active) simulation.alphaTarget(0.3).restart();
                event.subject.fx = event.subject.x;
                event.subject.fy = event.subject.y;
            }

            function dragged(event) {
                event.subject.fx = event.x;
                event.subject.fy = event.y;
            }

            function dragended(event) {
                if (!event.active) simulation.alphaTarget(0);
                event.subject.fx = null;
                event.subject.fy = null;
            }
        });
    })();
    </script>
</body>
</html>
```
:::

